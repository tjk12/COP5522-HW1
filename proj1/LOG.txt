Development Log: HW1 Performance Optimization
Name: Trever Knie

Aug 28, 2025: Wrote the initial baseline version of the matrix-vector multiplication code in Mv.cpp. Included command-line argument parsing and time measurement using std::chrono.

Aug 29, 2025: Attempted to compile the baseline code with gcc -O3 Mv.cpp. The program did not compile, resulting in multiple "Undefined symbols" linker errors related to the C++ standard library.

Bug Fix: With help from the AI assistant, diagnosed the issue as using the C compiler driver (gcc) instead of the C++ driver (g++). Fixed the linker errors by switching the compiler to g++. The baseline code now compiles and runs correctly.

Aug 30, 2025: Implemented the first optimized version using AVX2 SIMD intrinsics in a new file, hw1.cpp. Focused on vectorizing the inner loop to process four double-precision elements at a time using _mm256_fmadd_pd.

Sep 1, 2025: Created the initial makefile to manage compilation of both the baseline and optimized versions. Wrote the first version of the generate_report.py script to automate benchmarking and report creation.

Sep 2, 2025: Decided to expand the analysis. Implemented two additional optimization strategies to compare:

unroll.cpp: Implemented manual loop unrolling.

interchange.cpp: Implemented loop interchange to analyze the effect of memory access patterns.

Significantly updated the makefile and generate_report.py to build, benchmark, and plot all four versions (baseline, AVX2, unroll, interchange) for a comprehensive comparison.

Sep 3, 2025: Finalized the project for submission.

Modified the makefile so that the default make command compiles the best-performing version (avx2.cpp) into the required hw1 executable.

Updated the Python script to generate this LOG.txt file as a separate deliverable.

Performed final tests on all code and reviewed the generated hw1.pdf report for clarity and correctness. Submitted the assignment.